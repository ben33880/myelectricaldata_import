name: "[STAGING] Build/Push Pre-Release"

on:
  workflow_dispatch:
    inputs:
      FORCE:
        description: 'FORCE REBUILD'
        required: true
        default: false
        type: boolean

env: 
  IMAGE_REPO: pbranly
  IMAGE_NAME: myelectricaldatavm

jobs:

  informations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Login DockerHub avec la mÃ©thode debug qui fonctionne
      - name: Login DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker --debug login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Generate release version
        id: informations
        env:
          FORCE: ${{ inputs.FORCE }}
        run: |
          version=$(cat src/__version__.py | grep VERSION | awk '{print $3}' | tr -d '"')
          echo "version=${version}" >> "$GITHUB_OUTPUT"

          if [ "$FORCE" == "true" ]; then
            echo "build=true" >> "$GITHUB_OUTPUT"
          else
            if docker manifest inspect ${IMAGE_REPO}/${IMAGE_NAME}:${version} > /dev/null 2>&1; then
              echo "Image already exists => SKIP BUILDING"
              echo "build=false" >> "$GITHUB_OUTPUT"
            else
              echo "build=true" >> "$GITHUB_OUTPUT"
            fi
          fi

          echo "IMAGE_REPO=${IMAGE_REPO}" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

    outputs:
      version: ${{ steps.informations.outputs.version }}
      build: ${{ steps.informations.outputs.build }}
      IMAGE_REPO: ${{ steps.informations.outputs.IMAGE_REPO }}
      IMAGE_NAME: ${{ steps.informations.outputs.IMAGE_NAME }}

  Build-And-Push-Image:
    needs: informations
    if: ${{ needs.informations.outputs.build == 'true' }}
    run: |
      docker build \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg BUILD_REF=$(git rev-parse --short HEAD) \
        --build-arg BUILD_VERSION=${{ needs.informations.outputs.version }} \
        -t ${IMAGE_REPO}/${IMAGE_NAME}:${{ needs.informations.outputs.version }} \
        .
      docker push ${IMAGE_REPO}/${IMAGE_NAME}:${{ needs.informations.outputs.version }}
